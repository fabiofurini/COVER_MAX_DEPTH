#ifndef glo_function_HEADER
#define glo_function_HEADER


#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <math.h>
#include <vector>
#include <set>
#include <string>
#include <sstream>
#include <errno.h>
#include <cstring>
#include <cstdlib>


#include "global_variables_MULTI_KP.h"


/*****************************************************************/
int randomBETWEEN(int min,int max);
/*****************************************************************/

/*****************************************************************/
double randomBETWEEN_double(int min,int max);
/*****************************************************************/

/*****************************************************************/
double random01();
/*****************************************************************/

/***********************************************************************************/
void generate_instance_MULTI_KP(data_MULTI_KP *MULTI_KP_instance);
/***********************************************************************************/

/***********************************************************************************/
int  read_instance_file_multi_kp(data_MULTI_KP *MULTI_KP_instance,double conflict_density);
/***********************************************************************************/

/***********************************************************************************/
void free_data_prob_multi_kp(data_MULTI_KP *MULTI_KP_instance);
/***********************************************************************************/

/***********************************************************************************/
void multi_kp_load_cplex(data_MULTI_KP *MULTI_KP_instance);
/***********************************************************************************/

/***********************************************************************************/
void multi_kp_free_cplex(data_MULTI_KP *MULTI_KP_instance);
/***********************************************************************************/

/***********************************************************************************/
double multi_kp_solve_cplex(data_MULTI_KP *MULTI_KP_instance);
/***********************************************************************************/

/***********************************************************************************/
double multi_kp_solve_cplex_LP(data_MULTI_KP *MULTI_KP_instance,double *point);
/***********************************************************************************/

/***********************************************************************************/
void add_cover(data_MULTI_KP *MULTI_KP_instance,double *cover);
/***********************************************************************************/

/***********************************************************************************/
void add_cover_extended(data_MULTI_KP *MULTI_KP_instance,double *cover, double RHS);
/***********************************************************************************/


#endif
